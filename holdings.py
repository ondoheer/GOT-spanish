from libraries import JSONDictionary

holdingsData = {
    'defense': {
        'superiorCastle': 50,
        'castle': 40,
        'smallCastle': 30,
        'hall': 20,
        'tower': 10
    },
    'influence': {
        'firstBorn': 20,
        'secondBorn': 10,
        'otherChildren': 5
    },
    'lands': {
        'terrainCosts': {
            'hills': 7,
            'mountains': 9,
            'plains': 5,
            'wetlands': 3
        },
        'featureCost': {
            'population': {
                'hamlet': 10,
                'smallTown': 20,
                'largeTown': 30,
                'smallCity': 40,
                'largeCity': 50
            },
            'waterBodies': {
                'stream': 1,
                'river': 3,
                'pond': 5,
                'lake': 7
            },
            'seaAccess': {
                'coast': 3,
                'island': 10
            },
            'woods': {
                'lightWoods': 3,
                'denseWoods': 5
            },
            'extras': {
                'grassland': 1,
                'road': 5,
                'ruin': 3,
            }
        },
        'realms': {
            'dorne': (
                'hills',
                'mountains',
                'plains'
            ),
            'dragonstone': (
                'hills',
                'plains',
                'wetlands'
            ),
            'theIronIslands': (
                'hills',
                'plains'
            ),
            'kingslanding': (
                'plains'
            ),
            'mountainsOfTheMoon': (
                'hills',
                'mountains'
            ),
            'theNorth': (
                'plains',
                'hills',
                'mountains',
                'wetlands'
            ),
            'theReach': (
                'plains'
            ),
            'riverlands': (
                'hills',
                'plains',
                'wetlands'
            ),
            'theStormlands': (
                'hills',
                'mountains',
                'plains',
                'wetlands'
            ),
            'westernlands': (
                'hills',
                'mountains',
                'plains'
            )
        }
    }
}


class Holdings(object):
    defenseHoldings = None
    influenceHoldings = None
    landTerrains = None

    def __init__(self, holdingsDict):
        self.defenseHoldings = list()
        self.influenceHoldings = list()
        self.landTerrains = list()
        self.defense = JSONDictionary(holdingsDict).getKeyValue('defense')
        self.influence = JSONDictionary(holdingsDict).getKeyValue('influence')
        self.lands = JSONDictionary(holdingsDict).getKeyValue('lands')

    def generateAllHoldings(self, houseDict, realm):
        '''Function to generate all holdings in one process,
        takes the house dict generated by the house Stat generator
        and the house realm'''
        self.generateDefense(houseDict)
        self.generateInfluence(houseDict)
        self.generateLand(houseDict, realm)
        return houseDict

    def generateDefense(self, houseDict, *args):
        '''Buys defense holdings for the house and returns
        the remaining unspend points. Takes a house dictonary to add
        items to it and can take a specific defense dictionary
        in case you don't want to use the standard one.'''
        if len(args) < 1:
            defenseDict = self.defense
        else:
            defenseDict = args[0]
        defenseTotal = houseDict['defense']
        if defenseTotal > defenseDict['superiorCastle']:
            self.defenseHoldings.append('Superior Castle')
            defenseTotal -= defenseDict['superiorCastle']
        if self.defenseHoldings.count('Superior Castle') > 0:
            while defenseTotal > defenseDict['smallCastle']:
                    self.defenseHoldings.append('Small Castle')
                    defenseTotal -= defenseDict['smallCastle']
            while defenseTotal > defenseDict['hall']:
                self.defenseHoldings.append('Hall')
                defenseTotal -= defenseDict['hall']
            while defenseTotal > defenseDict['tower']:
                self.defenseHoldings.append('Tower')
                defenseTotal -= defenseDict['tower']
        else:
            if defenseTotal > defenseDict['castle']:
                self.defenseHoldings.append('Castle')
                defenseTotal -= defenseDict['castle']
            if self.defenseHoldings.count('Castle') > 0:
                while defenseTotal > defenseDict['hall']:
                    self.defenseHoldings.append('Hall')
                    defenseTotal -= defenseDict['hall']
                while defenseTotal > defenseDict['tower']:
                    self.defenseHoldings.append('Tower')
                    defenseTotal -= defenseDict['tower']
            else:
                while defenseTotal > defenseDict['smallCastle']:
                    self.defenseHoldings.append('Small Castle')
                    defenseTotal -= defenseDict['smallCastle']
                while defenseTotal > defenseDict['hall']:
                    self.defenseHoldings.append('Hall')
                    defenseTotal -= defenseDict['hall']
                while defenseTotal > defenseDict['tower']:
                    self.defenseHoldings.append('Tower')
                    defenseTotal -= defenseDict['tower']
        houseDict['defenseHoldings'] = self.defenseHoldings
        houseDict['remainingDefense'] = defenseTotal
        return houseDict

    def generateInfluence(self, houseDict, *args):
        if len(args) < 1:
            influenceDict = self.influence
        else:
            influenceDict = args[0]
        influenceTotal = houseDict['influence']
        if influenceTotal < 11:
            houseDict['maxStatus'] = 2
        elif influenceTotal < 21:
            houseDict['maxStatus'] = 3
        elif influenceTotal < 41:
            houseDict['maxStatus'] = 4
        elif influenceTotal < 51:
            houseDict['maxStatus'] = 5
        elif influenceTotal < 61:
            houseDict['maxStatus'] = 6
        elif influenceTotal < 71:
            houseDict['maxStatus'] = 7

        if influenceTotal < influenceDict['firstBorn']:
            houseDict['influenceHoldings'] = self.influenceHoldings
            houseDict['remainingInfluence'] = influenceTotal
            return houseDict
        else:
            self.influenceHoldings.append('First Born')
            influenceTotal -= influenceDict['firstBorn']
            if influenceTotal < influenceDict['secondBorn']:
                houseDict['influenceHoldings'] = self.influenceHoldings
                houseDict['remainingInfluence'] = influenceTotal
                return houseDict
            else:
                self.influenceHoldings.append('Second Born')
                influenceTotal -= influenceDict['secondBorn']
                while influenceTotal > influenceDict['otherChildren']:
                    self.influenceHoldings.append('Other child')
                    influenceTotal -= influenceDict['otherChildren']
            houseDict['influenceHoldings'] = self.influenceHoldings
            houseDict['remainingInfluence'] = influenceTotal

            return houseDict

    def generateLand(self, houseDict, realm, *args):
        if len(args) < 1:
            terrainsDict = self.lands
        else:
            terrainsDict = args[0]
        print realm
        print type(realm)
        print JSONDictionary(terrainsDict).getKeyValue(realm)
